{"ast":null,"code":"// Note: In a real application, you would need to get your API key from environment variables\n// For now, we'll use a placeholder that should be replaced with your actual Gemini API key\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'your-gemini-api-key-here';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\n\n// Test function to debug API response\nexport const testGeminiAPI = async () => {\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: \"Hello, please respond with a simple JSON object: {\\\"message\\\": \\\"Hello World\\\"}\"\n          }]\n        }]\n      })\n    });\n    console.log('Test API Response Status:', response.status);\n    const data = await response.json();\n    console.log('Test API Response Data:', JSON.stringify(data, null, 2));\n    return data;\n  } catch (error) {\n    console.error('Test API Error:', error);\n    return null;\n  }\n};\nexport const generateItinerary = async travelData => {\n  const {\n    place,\n    motive,\n    budget,\n    currency,\n    includeTravelCost,\n    numberOfMembers,\n    numberOfDays\n  } = travelData;\n  const prompt = `Create a detailed travel itinerary for ${numberOfMembers} person(s) visiting ${place} for ${numberOfDays} day(s) with a ${motive} trip motive. \n  Budget: ${budget} ${currency}${includeTravelCost ? ' (including travel costs)' : ' (excluding travel costs)'}.\n  \n  Please provide a comprehensive itinerary including:\n  1. Daily activities with specific times for each of the ${numberOfDays} days\n  2. Places to visit with descriptions\n  3. Food recommendations\n  4. Transportation options\n  5. Accommodation suggestions\n  6. Cost estimates for each activity\n  \n  IMPORTANT: \n  - Generate exactly 20 different activity options for the activities array. Only include activities that users can choose from (sightseeing, tours, experiences, etc.). Do NOT include food, travel, accommodation, or other mandatory costs in the activities array.\n  - ALL prices must be in ${currency} currency. Convert all costs to ${currency} based on current exchange rates.\n  - Include the most famous activities for ${place} with motive of ${motive}.\n  - Keep response concise and under 8000 tokens.\n  \n  Return ONLY a valid JSON object with this structure:\n  {\n    \"itinerary\": {\"days\": [{\"day\": 1, \"date\": \"2024-01-01\", \"activities\": [{\"time\": \"09:00\", \"activity\": \"Activity\", \"place\": \"Location\", \"description\": \"Brief description\", \"costPerPerson\": 50, \"category\": \"activities\"}]}]},\n    \"activities\": [{\"id\": \"1\", \"name\": \"Activity\", \"place\": \"Location\", \"description\": \"Brief description\", \"costPerPerson\": 50, \"category\": \"activities\", \"duration\": \"2h\", \"bestTime\": \"morning\"}],\n    \"budgetBreakdown\": {\"food\": 200, \"travel\": 300, \"activities\": 150, \"accommodation\": 400, \"other\": 50},\n    \"totalEstimatedCost\": 1100\n  }`;\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 32768\n        }\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error('Gemini API Error Details:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: errorData\n      });\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Log the full response to debug the structure\n    console.log('Full API Response:', JSON.stringify(data, null, 2));\n\n    // Check if there's an error in the response\n    if (data.error) {\n      console.error('API returned an error:', data.error);\n      throw new Error(`API Error: ${data.error.message || 'Unknown error'}`);\n    }\n    if (!data.candidates || !data.candidates[0]) {\n      console.error('No candidates in response:', data);\n      throw new Error('Invalid response format from Gemini API - no candidates');\n    }\n\n    // Check if response was truncated due to token limit\n    if (data.candidates[0].finishReason === 'MAX_TOKENS') {\n      console.warn('Response was truncated due to MAX_TOKENS limit. Using mock data instead.');\n      return generateMockResponse(place, motive, budget, currency, numberOfMembers, numberOfDays);\n    }\n    if (!data.candidates[0].content) {\n      console.error('No content in first candidate:', data.candidates[0]);\n      throw new Error('Invalid response format from Gemini API - no content');\n    }\n    if (!data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {\n      console.error('No parts in content:', data.candidates[0].content);\n      throw new Error('Invalid response format from Gemini API - no parts');\n    }\n    const responseText = data.candidates[0].content.parts[0].text;\n    console.log('Response text:', responseText);\n\n    // Try to parse the JSON response\n    try {\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsedData = JSON.parse(jsonMatch[0]);\n        console.log('Successfully parsed JSON response');\n        return parsedData;\n      } else {\n        console.error('No JSON found in response text');\n        throw new Error('No JSON found in response');\n      }\n    } catch (parseError) {\n      console.error('Failed to parse JSON response:', parseError);\n      console.error('Raw response text:', responseText);\n      throw new Error('Failed to parse API response as JSON');\n    }\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    // Return mock data as fallback\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers, numberOfDays);\n  }\n};\n\n// Mock response generator for development/testing\nconst generateMockResponse = (place, motive, budget, currency, numberOfMembers, numberOfDays) => {\n  const mockActivities = [{\n    id: '1',\n    name: 'City Walking Tour',\n    place: `${place} Historic Center`,\n    description: 'Explore the historic landmarks and cultural sites',\n    costPerPerson: 25,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'morning'\n  }, {\n    id: '2',\n    name: 'Museum Visit',\n    place: 'National Museum',\n    description: 'Learn about local history and culture',\n    costPerPerson: 15,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '3',\n    name: 'Scenic Viewpoint',\n    place: 'Mountain Lookout',\n    description: 'Enjoy panoramic views of the city',\n    costPerPerson: 10,\n    category: 'activities',\n    duration: '1 hour',\n    bestTime: 'evening'\n  }, {\n    id: '4',\n    name: 'Art Gallery Tour',\n    place: 'Modern Art Gallery',\n    description: 'Discover contemporary local and international art',\n    costPerPerson: 20,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '5',\n    name: 'Cultural Workshop',\n    place: 'Art Center',\n    description: 'Learn traditional crafts and techniques',\n    costPerPerson: 45,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '6',\n    name: 'Nature Hike',\n    place: 'National Park',\n    description: 'Explore natural trails and observe local wildlife',\n    costPerPerson: 30,\n    category: 'activities',\n    duration: '4 hours',\n    bestTime: 'morning'\n  }, {\n    id: '7',\n    name: 'Boat Tour',\n    place: 'City Harbor',\n    description: 'Scenic boat ride with city skyline views',\n    costPerPerson: 35,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '8',\n    name: 'Cooking Class',\n    place: 'Culinary School',\n    description: 'Learn to prepare authentic local dishes',\n    costPerPerson: 60,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'morning'\n  }, {\n    id: '9',\n    name: 'Photography Tour',\n    place: 'Historic District',\n    description: 'Capture the best shots with a professional guide',\n    costPerPerson: 40,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'evening'\n  }, {\n    id: '10',\n    name: 'Wine Tasting',\n    place: 'Local Winery',\n    description: 'Sample regional wines and learn about local viticulture',\n    costPerPerson: 50,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '11',\n    name: 'Architecture Tour',\n    place: 'Downtown District',\n    description: 'Explore iconic buildings and architectural styles',\n    costPerPerson: 25,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'morning'\n  }, {\n    id: '12',\n    name: 'Music Performance',\n    place: 'Concert Hall',\n    description: 'Attend a classical or traditional music concert',\n    costPerPerson: 40,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'evening'\n  }, {\n    id: '13',\n    name: 'Market Tour',\n    place: 'Local Market',\n    description: 'Explore local markets and taste regional specialties',\n    costPerPerson: 20,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'morning'\n  }, {\n    id: '14',\n    name: 'Bike Tour',\n    place: 'City Streets',\n    description: 'Cycling tour through scenic neighborhoods',\n    costPerPerson: 30,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'morning'\n  }, {\n    id: '15',\n    name: 'Theater Show',\n    place: 'Historic Theater',\n    description: 'Watch a local theater production or musical',\n    costPerPerson: 35,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'evening'\n  }, {\n    id: '16',\n    name: 'Garden Tour',\n    place: 'Botanical Gardens',\n    description: 'Explore beautiful gardens and exotic plants',\n    costPerPerson: 15,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '17',\n    name: 'Nightlife Tour',\n    place: 'Entertainment District',\n    description: 'Experience the local nightlife and bars',\n    costPerPerson: 45,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'evening'\n  }, {\n    id: '18',\n    name: 'Adventure Park',\n    place: 'Outdoor Adventure Center',\n    description: 'Try zip-lining, rock climbing, and outdoor activities',\n    costPerPerson: 55,\n    category: 'activities',\n    duration: '4 hours',\n    bestTime: 'morning'\n  }, {\n    id: '19',\n    name: 'Historical Site Visit',\n    place: 'Ancient Ruins',\n    description: 'Explore historical monuments and archaeological sites',\n    costPerPerson: 20,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'morning'\n  }, {\n    id: '20',\n    name: 'Spa Experience',\n    place: 'Luxury Spa',\n    description: 'Relax with traditional treatments and massages',\n    costPerPerson: 80,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }];\n  const budgetAmount = parseInt(budget) || 1000;\n  const budgetBreakdown = {\n    food: Math.floor(budgetAmount * 0.3),\n    travel: Math.floor(budgetAmount * 0.25),\n    activities: Math.floor(budgetAmount * 0.2),\n    accommodation: Math.floor(budgetAmount * 0.2),\n    other: Math.floor(budgetAmount * 0.05)\n  };\n\n  // Adjust activity prices based on currency (rough conversion for demo)\n  const getCurrencyMultiplier = curr => {\n    const multipliers = {\n      'USD': 1.0,\n      'EUR': 0.85,\n      'GBP': 0.75,\n      'JPY': 110,\n      'INR': 75,\n      'CAD': 1.25,\n      'AUD': 1.35\n    };\n    return multipliers[curr] || 1.0;\n  };\n  const currencyMultiplier = getCurrencyMultiplier(currency);\n  const adjustedActivities = mockActivities.map(activity => ({\n    ...activity,\n    costPerPerson: Math.round(activity.costPerPerson * currencyMultiplier)\n  }));\n\n  // Generate days based on numberOfDays\n  const generateDays = () => {\n    const days = [];\n    for (let i = 1; i <= numberOfDays; i++) {\n      const date = new Date(Date.now() + (i - 1) * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const activitiesPerDay = Math.ceil(adjustedActivities.length / numberOfDays);\n      const startIndex = (i - 1) * activitiesPerDay;\n      const endIndex = Math.min(startIndex + activitiesPerDay, adjustedActivities.length);\n      days.push({\n        day: i,\n        date: date,\n        activities: adjustedActivities.slice(startIndex, endIndex).map(activity => ({\n          time: '09:00',\n          activity: activity.name,\n          place: activity.place,\n          description: activity.description,\n          costPerPerson: activity.costPerPerson,\n          category: activity.category\n        }))\n      });\n    }\n    return days;\n  };\n  return {\n    itinerary: {\n      days: generateDays()\n    },\n    activities: adjustedActivities,\n    budgetBreakdown,\n    totalEstimatedCost: budgetAmount\n  };\n};","map":{"version":3,"names":["GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_URL","testGeminiAPI","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","console","log","status","data","json","error","generateItinerary","travelData","place","motive","budget","currency","includeTravelCost","numberOfMembers","numberOfDays","prompt","generationConfig","temperature","topK","topP","maxOutputTokens","ok","errorData","catch","statusText","Error","message","candidates","finishReason","warn","generateMockResponse","content","responseText","jsonMatch","match","parsedData","parse","parseError","mockActivities","id","name","description","costPerPerson","category","duration","bestTime","budgetAmount","parseInt","budgetBreakdown","food","Math","floor","travel","activities","accommodation","other","getCurrencyMultiplier","curr","multipliers","currencyMultiplier","adjustedActivities","map","activity","round","generateDays","days","i","date","Date","now","toISOString","split","activitiesPerDay","ceil","length","startIndex","endIndex","min","push","day","slice","time","itinerary","totalEstimatedCost"],"sources":["/Users/vishalghai/Downloads/TravelPocket/src/services/geminiApi.js"],"sourcesContent":["// Note: In a real application, you would need to get your API key from environment variables\n// For now, we'll use a placeholder that should be replaced with your actual Gemini API key\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'your-gemini-api-key-here';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\n\n// Test function to debug API response\nexport const testGeminiAPI = async () => {\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: \"Hello, please respond with a simple JSON object: {\\\"message\\\": \\\"Hello World\\\"}\"\n          }]\n        }]\n      })\n    });\n\n    console.log('Test API Response Status:', response.status);\n    const data = await response.json();\n    console.log('Test API Response Data:', JSON.stringify(data, null, 2));\n    return data;\n  } catch (error) {\n    console.error('Test API Error:', error);\n    return null;\n  }\n};\n\nexport const generateItinerary = async (travelData) => {\n  const { place, motive, budget, currency, includeTravelCost, numberOfMembers, numberOfDays } = travelData;\n  \n  const prompt = `Create a detailed travel itinerary for ${numberOfMembers} person(s) visiting ${place} for ${numberOfDays} day(s) with a ${motive} trip motive. \n  Budget: ${budget} ${currency}${includeTravelCost ? ' (including travel costs)' : ' (excluding travel costs)'}.\n  \n  Please provide a comprehensive itinerary including:\n  1. Daily activities with specific times for each of the ${numberOfDays} days\n  2. Places to visit with descriptions\n  3. Food recommendations\n  4. Transportation options\n  5. Accommodation suggestions\n  6. Cost estimates for each activity\n  \n  IMPORTANT: \n  - Generate exactly 20 different activity options for the activities array. Only include activities that users can choose from (sightseeing, tours, experiences, etc.). Do NOT include food, travel, accommodation, or other mandatory costs in the activities array.\n  - ALL prices must be in ${currency} currency. Convert all costs to ${currency} based on current exchange rates.\n  - Include the most famous activities for ${place} with motive of ${motive}.\n  - Keep response concise and under 8000 tokens.\n  \n  Return ONLY a valid JSON object with this structure:\n  {\n    \"itinerary\": {\"days\": [{\"day\": 1, \"date\": \"2024-01-01\", \"activities\": [{\"time\": \"09:00\", \"activity\": \"Activity\", \"place\": \"Location\", \"description\": \"Brief description\", \"costPerPerson\": 50, \"category\": \"activities\"}]}]},\n    \"activities\": [{\"id\": \"1\", \"name\": \"Activity\", \"place\": \"Location\", \"description\": \"Brief description\", \"costPerPerson\": 50, \"category\": \"activities\", \"duration\": \"2h\", \"bestTime\": \"morning\"}],\n    \"budgetBreakdown\": {\"food\": 200, \"travel\": 300, \"activities\": 150, \"accommodation\": 400, \"other\": 50},\n    \"totalEstimatedCost\": 1100\n  }`;\n\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 32768,\n        }\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error('Gemini API Error Details:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: errorData\n      });\n      throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    // Log the full response to debug the structure\n    console.log('Full API Response:', JSON.stringify(data, null, 2));\n    \n    // Check if there's an error in the response\n    if (data.error) {\n      console.error('API returned an error:', data.error);\n      throw new Error(`API Error: ${data.error.message || 'Unknown error'}`);\n    }\n    \n    if (!data.candidates || !data.candidates[0]) {\n      console.error('No candidates in response:', data);\n      throw new Error('Invalid response format from Gemini API - no candidates');\n    }\n    \n    // Check if response was truncated due to token limit\n    if (data.candidates[0].finishReason === 'MAX_TOKENS') {\n      console.warn('Response was truncated due to MAX_TOKENS limit. Using mock data instead.');\n      return generateMockResponse(place, motive, budget, currency, numberOfMembers, numberOfDays);\n    }\n    \n    if (!data.candidates[0].content) {\n      console.error('No content in first candidate:', data.candidates[0]);\n      throw new Error('Invalid response format from Gemini API - no content');\n    }\n    \n    if (!data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {\n      console.error('No parts in content:', data.candidates[0].content);\n      throw new Error('Invalid response format from Gemini API - no parts');\n    }\n\n    const responseText = data.candidates[0].content.parts[0].text;\n    \n    console.log('Response text:', responseText);\n    \n    // Try to parse the JSON response\n    try {\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsedData = JSON.parse(jsonMatch[0]);\n        console.log('Successfully parsed JSON response');\n        return parsedData;\n      } else {\n        console.error('No JSON found in response text');\n        throw new Error('No JSON found in response');\n      }\n    } catch (parseError) {\n      console.error('Failed to parse JSON response:', parseError);\n      console.error('Raw response text:', responseText);\n      throw new Error('Failed to parse API response as JSON');\n    }\n    \n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    // Return mock data as fallback\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers, numberOfDays);\n  }\n};\n\n// Mock response generator for development/testing\nconst generateMockResponse = (place, motive, budget, currency, numberOfMembers, numberOfDays) => {\n  const mockActivities = [\n    {\n      id: '1',\n      name: 'City Walking Tour',\n      place: `${place} Historic Center`,\n      description: 'Explore the historic landmarks and cultural sites',\n      costPerPerson: 25,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '2',\n      name: 'Museum Visit',\n      place: 'National Museum',\n      description: 'Learn about local history and culture',\n      costPerPerson: 15,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '3',\n      name: 'Scenic Viewpoint',\n      place: 'Mountain Lookout',\n      description: 'Enjoy panoramic views of the city',\n      costPerPerson: 10,\n      category: 'activities',\n      duration: '1 hour',\n      bestTime: 'evening'\n    },\n    {\n      id: '4',\n      name: 'Art Gallery Tour',\n      place: 'Modern Art Gallery',\n      description: 'Discover contemporary local and international art',\n      costPerPerson: 20,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '5',\n      name: 'Cultural Workshop',\n      place: 'Art Center',\n      description: 'Learn traditional crafts and techniques',\n      costPerPerson: 45,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '6',\n      name: 'Nature Hike',\n      place: 'National Park',\n      description: 'Explore natural trails and observe local wildlife',\n      costPerPerson: 30,\n      category: 'activities',\n      duration: '4 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '7',\n      name: 'Boat Tour',\n      place: 'City Harbor',\n      description: 'Scenic boat ride with city skyline views',\n      costPerPerson: 35,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '8',\n      name: 'Cooking Class',\n      place: 'Culinary School',\n      description: 'Learn to prepare authentic local dishes',\n      costPerPerson: 60,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '9',\n      name: 'Photography Tour',\n      place: 'Historic District',\n      description: 'Capture the best shots with a professional guide',\n      costPerPerson: 40,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'evening'\n    },\n    {\n      id: '10',\n      name: 'Wine Tasting',\n      place: 'Local Winery',\n      description: 'Sample regional wines and learn about local viticulture',\n      costPerPerson: 50,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '11',\n      name: 'Architecture Tour',\n      place: 'Downtown District',\n      description: 'Explore iconic buildings and architectural styles',\n      costPerPerson: 25,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '12',\n      name: 'Music Performance',\n      place: 'Concert Hall',\n      description: 'Attend a classical or traditional music concert',\n      costPerPerson: 40,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'evening'\n    },\n    {\n      id: '13',\n      name: 'Market Tour',\n      place: 'Local Market',\n      description: 'Explore local markets and taste regional specialties',\n      costPerPerson: 20,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '14',\n      name: 'Bike Tour',\n      place: 'City Streets',\n      description: 'Cycling tour through scenic neighborhoods',\n      costPerPerson: 30,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '15',\n      name: 'Theater Show',\n      place: 'Historic Theater',\n      description: 'Watch a local theater production or musical',\n      costPerPerson: 35,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'evening'\n    },\n    {\n      id: '16',\n      name: 'Garden Tour',\n      place: 'Botanical Gardens',\n      description: 'Explore beautiful gardens and exotic plants',\n      costPerPerson: 15,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '17',\n      name: 'Nightlife Tour',\n      place: 'Entertainment District',\n      description: 'Experience the local nightlife and bars',\n      costPerPerson: 45,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'evening'\n    },\n    {\n      id: '18',\n      name: 'Adventure Park',\n      place: 'Outdoor Adventure Center',\n      description: 'Try zip-lining, rock climbing, and outdoor activities',\n      costPerPerson: 55,\n      category: 'activities',\n      duration: '4 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '19',\n      name: 'Historical Site Visit',\n      place: 'Ancient Ruins',\n      description: 'Explore historical monuments and archaeological sites',\n      costPerPerson: 20,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '20',\n      name: 'Spa Experience',\n      place: 'Luxury Spa',\n      description: 'Relax with traditional treatments and massages',\n      costPerPerson: 80,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    }\n  ];\n\n  const budgetAmount = parseInt(budget) || 1000;\n  const budgetBreakdown = {\n    food: Math.floor(budgetAmount * 0.3),\n    travel: Math.floor(budgetAmount * 0.25),\n    activities: Math.floor(budgetAmount * 0.2),\n    accommodation: Math.floor(budgetAmount * 0.2),\n    other: Math.floor(budgetAmount * 0.05)\n  };\n\n  // Adjust activity prices based on currency (rough conversion for demo)\n  const getCurrencyMultiplier = (curr) => {\n    const multipliers = {\n      'USD': 1.0,\n      'EUR': 0.85,\n      'GBP': 0.75,\n      'JPY': 110,\n      'INR': 75,\n      'CAD': 1.25,\n      'AUD': 1.35\n    };\n    return multipliers[curr] || 1.0;\n  };\n\n  const currencyMultiplier = getCurrencyMultiplier(currency);\n  const adjustedActivities = mockActivities.map(activity => ({\n    ...activity,\n    costPerPerson: Math.round(activity.costPerPerson * currencyMultiplier)\n  }));\n\n  // Generate days based on numberOfDays\n  const generateDays = () => {\n    const days = [];\n    for (let i = 1; i <= numberOfDays; i++) {\n      const date = new Date(Date.now() + (i - 1) * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const activitiesPerDay = Math.ceil(adjustedActivities.length / numberOfDays);\n      const startIndex = (i - 1) * activitiesPerDay;\n      const endIndex = Math.min(startIndex + activitiesPerDay, adjustedActivities.length);\n      \n      days.push({\n        day: i,\n        date: date,\n        activities: adjustedActivities.slice(startIndex, endIndex).map(activity => ({\n          time: '09:00',\n          activity: activity.name,\n          place: activity.place,\n          description: activity.description,\n          costPerPerson: activity.costPerPerson,\n          category: activity.category\n        }))\n      });\n    }\n    return days;\n  };\n\n  return {\n    itinerary: {\n      days: generateDays()\n    },\n    activities: adjustedActivities,\n    budgetBreakdown,\n    totalEstimatedCost: budgetAmount\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}