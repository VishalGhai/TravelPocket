{"ast":null,"code":"// Note: In a real application, you would need to get your API key from environment variables\n// For now, we'll use a placeholder that should be replaced with your actual Gemini API key\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'your-gemini-api-key-here';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nexport const generateItinerary = async travelData => {\n  const {\n    place,\n    motive,\n    budget,\n    currency,\n    includeTravelCost,\n    numberOfMembers\n  } = travelData;\n  const prompt = `Create a detailed travel itinerary for ${numberOfMembers} person(s) visiting ${place} with a ${motive} trip motive. \n  Budget: ${budget} ${currency}${includeTravelCost ? ' (including travel costs)' : ' (excluding travel costs)'}.\n  \n  Please provide a comprehensive itinerary including:\n  1. Daily activities with specific times\n  2. Places to visit with descriptions\n  3. Food recommendations\n  4. Transportation options\n  5. Accommodation suggestions\n  6. Cost estimates for each activity\n  \n  IMPORTANT: Generate at least 20 different activity options for the activities array. Only include activities that users can choose from (sightseeing, tours, experiences, etc.). Do NOT include food, travel, accommodation, or other mandatory costs in the activities array.\n  \n  Format the response as a JSON object with the following structure:\n  {\n    \"itinerary\": {\n      \"days\": [\n        {\n          \"day\": 1,\n          \"date\": \"YYYY-MM-DD\",\n          \"activities\": [\n            {\n              \"time\": \"09:00\",\n              \"activity\": \"Activity name\",\n              \"place\": \"Place name\",\n              \"description\": \"Activity description\",\n              \"costPerPerson\": 50,\n              \"category\": \"activities\"\n            }\n          ]\n        }\n      ]\n    },\n    \"activities\": [\n      {\n        \"id\": \"unique-id\",\n        \"name\": \"Activity name\",\n        \"place\": \"Place name\",\n        \"description\": \"Activity description\",\n        \"costPerPerson\": 50,\n        \"category\": \"activities\",\n        \"duration\": \"2 hours\",\n        \"bestTime\": \"morning|afternoon|evening\"\n      }\n    ],\n    \"budgetBreakdown\": {\n      \"food\": 200,\n      \"travel\": 300,\n      \"activities\": 150,\n      \"accommodation\": 400,\n      \"other\": 50\n    },\n    \"totalEstimatedCost\": 1100\n  }`;\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n      throw new Error('Invalid response format from Gemini API');\n    }\n    const responseText = data.candidates[0].content.parts[0].text;\n\n    // Try to parse the JSON response\n    try {\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n    } catch (parseError) {\n      console.error('Failed to parse JSON response:', parseError);\n    }\n\n    // Fallback: return a mock response if JSON parsing fails\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers);\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    // Return mock data as fallback\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers);\n  }\n};\n\n// Mock response generator for development/testing\nconst generateMockResponse = (place, motive, budget, currency, numberOfMembers) => {\n  const mockActivities = [{\n    id: '1',\n    name: 'City Walking Tour',\n    place: `${place} Historic Center`,\n    description: 'Explore the historic landmarks and cultural sites',\n    costPerPerson: 25,\n    category: 'activities',\n    duration: '3 hours',\n    bestTime: 'morning'\n  }, {\n    id: '2',\n    name: 'Local Food Experience',\n    place: 'Traditional Market',\n    description: 'Taste authentic local cuisine and street food',\n    costPerPerson: 40,\n    category: 'food',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '3',\n    name: 'Museum Visit',\n    place: 'National Museum',\n    description: 'Learn about local history and culture',\n    costPerPerson: 15,\n    category: 'activities',\n    duration: '2 hours',\n    bestTime: 'afternoon'\n  }, {\n    id: '4',\n    name: 'Scenic Viewpoint',\n    place: 'Mountain Lookout',\n    description: 'Enjoy panoramic views of the city',\n    costPerPerson: 10,\n    category: 'activities',\n    duration: '1 hour',\n    bestTime: 'evening'\n  }, {\n    id: '5',\n    name: 'Local Transportation',\n    place: 'Public Transport',\n    description: 'Use local buses and metro for city exploration',\n    costPerPerson: 20,\n    category: 'travel',\n    duration: 'Full day',\n    bestTime: 'any'\n  }];\n  const budgetAmount = parseInt(budget) || 1000;\n  const budgetBreakdown = {\n    food: Math.floor(budgetAmount * 0.3),\n    travel: Math.floor(budgetAmount * 0.25),\n    activities: Math.floor(budgetAmount * 0.2),\n    accommodation: Math.floor(budgetAmount * 0.2),\n    other: Math.floor(budgetAmount * 0.05)\n  };\n  return {\n    itinerary: {\n      days: [{\n        day: 1,\n        date: new Date().toISOString().split('T')[0],\n        activities: mockActivities.slice(0, 3).map(activity => ({\n          time: '09:00',\n          activity: activity.name,\n          place: activity.place,\n          description: activity.description,\n          costPerPerson: activity.costPerPerson,\n          category: activity.category\n        }))\n      }, {\n        day: 2,\n        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        activities: mockActivities.slice(3).map(activity => ({\n          time: '10:00',\n          activity: activity.name,\n          place: activity.place,\n          description: activity.description,\n          costPerPerson: activity.costPerPerson,\n          category: activity.category\n        }))\n      }]\n    },\n    activities: mockActivities,\n    budgetBreakdown,\n    totalEstimatedCost: budgetAmount\n  };\n};","map":{"version":3,"names":["GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_URL","generateItinerary","travelData","place","motive","budget","currency","includeTravelCost","numberOfMembers","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","ok","Error","status","data","json","candidates","content","responseText","jsonMatch","match","parse","parseError","console","error","generateMockResponse","mockActivities","id","name","description","costPerPerson","category","duration","bestTime","budgetAmount","parseInt","budgetBreakdown","food","Math","floor","travel","activities","accommodation","other","itinerary","days","day","date","Date","toISOString","split","slice","map","activity","time","now","totalEstimatedCost"],"sources":["/Users/vishalghai/Downloads/TravelPocket/src/services/geminiApi.js"],"sourcesContent":["// Note: In a real application, you would need to get your API key from environment variables\n// For now, we'll use a placeholder that should be replaced with your actual Gemini API key\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'your-gemini-api-key-here';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\nexport const generateItinerary = async (travelData) => {\n  const { place, motive, budget, currency, includeTravelCost, numberOfMembers } = travelData;\n  \n  const prompt = `Create a detailed travel itinerary for ${numberOfMembers} person(s) visiting ${place} with a ${motive} trip motive. \n  Budget: ${budget} ${currency}${includeTravelCost ? ' (including travel costs)' : ' (excluding travel costs)'}.\n  \n  Please provide a comprehensive itinerary including:\n  1. Daily activities with specific times\n  2. Places to visit with descriptions\n  3. Food recommendations\n  4. Transportation options\n  5. Accommodation suggestions\n  6. Cost estimates for each activity\n  \n  IMPORTANT: Generate at least 20 different activity options for the activities array. Only include activities that users can choose from (sightseeing, tours, experiences, etc.). Do NOT include food, travel, accommodation, or other mandatory costs in the activities array.\n  \n  Format the response as a JSON object with the following structure:\n  {\n    \"itinerary\": {\n      \"days\": [\n        {\n          \"day\": 1,\n          \"date\": \"YYYY-MM-DD\",\n          \"activities\": [\n            {\n              \"time\": \"09:00\",\n              \"activity\": \"Activity name\",\n              \"place\": \"Place name\",\n              \"description\": \"Activity description\",\n              \"costPerPerson\": 50,\n              \"category\": \"activities\"\n            }\n          ]\n        }\n      ]\n    },\n    \"activities\": [\n      {\n        \"id\": \"unique-id\",\n        \"name\": \"Activity name\",\n        \"place\": \"Place name\",\n        \"description\": \"Activity description\",\n        \"costPerPerson\": 50,\n        \"category\": \"activities\",\n        \"duration\": \"2 hours\",\n        \"bestTime\": \"morning|afternoon|evening\"\n      }\n    ],\n    \"budgetBreakdown\": {\n      \"food\": 200,\n      \"travel\": 300,\n      \"activities\": 150,\n      \"accommodation\": 400,\n      \"other\": 50\n    },\n    \"totalEstimatedCost\": 1100\n  }`;\n\n  try {\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n      throw new Error('Invalid response format from Gemini API');\n    }\n\n    const responseText = data.candidates[0].content.parts[0].text;\n    \n    // Try to parse the JSON response\n    try {\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n    } catch (parseError) {\n      console.error('Failed to parse JSON response:', parseError);\n    }\n\n    // Fallback: return a mock response if JSON parsing fails\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers);\n    \n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    // Return mock data as fallback\n    return generateMockResponse(place, motive, budget, currency, numberOfMembers);\n  }\n};\n\n// Mock response generator for development/testing\nconst generateMockResponse = (place, motive, budget, currency, numberOfMembers) => {\n  const mockActivities = [\n    {\n      id: '1',\n      name: 'City Walking Tour',\n      place: `${place} Historic Center`,\n      description: 'Explore the historic landmarks and cultural sites',\n      costPerPerson: 25,\n      category: 'activities',\n      duration: '3 hours',\n      bestTime: 'morning'\n    },\n    {\n      id: '2',\n      name: 'Local Food Experience',\n      place: 'Traditional Market',\n      description: 'Taste authentic local cuisine and street food',\n      costPerPerson: 40,\n      category: 'food',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '3',\n      name: 'Museum Visit',\n      place: 'National Museum',\n      description: 'Learn about local history and culture',\n      costPerPerson: 15,\n      category: 'activities',\n      duration: '2 hours',\n      bestTime: 'afternoon'\n    },\n    {\n      id: '4',\n      name: 'Scenic Viewpoint',\n      place: 'Mountain Lookout',\n      description: 'Enjoy panoramic views of the city',\n      costPerPerson: 10,\n      category: 'activities',\n      duration: '1 hour',\n      bestTime: 'evening'\n    },\n    {\n      id: '5',\n      name: 'Local Transportation',\n      place: 'Public Transport',\n      description: 'Use local buses and metro for city exploration',\n      costPerPerson: 20,\n      category: 'travel',\n      duration: 'Full day',\n      bestTime: 'any'\n    }\n  ];\n\n  const budgetAmount = parseInt(budget) || 1000;\n  const budgetBreakdown = {\n    food: Math.floor(budgetAmount * 0.3),\n    travel: Math.floor(budgetAmount * 0.25),\n    activities: Math.floor(budgetAmount * 0.2),\n    accommodation: Math.floor(budgetAmount * 0.2),\n    other: Math.floor(budgetAmount * 0.05)\n  };\n\n  return {\n    itinerary: {\n      days: [\n        {\n          day: 1,\n          date: new Date().toISOString().split('T')[0],\n          activities: mockActivities.slice(0, 3).map(activity => ({\n            time: '09:00',\n            activity: activity.name,\n            place: activity.place,\n            description: activity.description,\n            costPerPerson: activity.costPerPerson,\n            category: activity.category\n          }))\n        },\n        {\n          day: 2,\n          date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          activities: mockActivities.slice(3).map(activity => ({\n            time: '10:00',\n            activity: activity.name,\n            place: activity.place,\n            description: activity.description,\n            costPerPerson: activity.costPerPerson,\n            category: activity.category\n          }))\n        }\n      ]\n    },\n    activities: mockActivities,\n    budgetBreakdown,\n    totalEstimatedCost: budgetAmount\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}